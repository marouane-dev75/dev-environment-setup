" ============================================================================
" Vim Configuration File
" ============================================================================

" Basic Settings
" ============================================================================
set nocompatible              " Disable vi compatibility
set number                    " Show line numbers
set relativenumber            " Show relative line numbers
set ruler                     " Show cursor position
set showcmd                   " Show command in bottom bar
set cursorline                " Highlight current line
set wildmenu                  " Visual autocomplete for command menu
set lazyredraw                " Redraw only when we need to
set showmatch                 " Highlight matching [{()}]
set incsearch                 " Search as characters are entered
set hlsearch                  " Highlight matches
set ignorecase                " Ignore case when searching
set smartcase                 " Override ignorecase if search contains uppercase
set backspace=indent,eol,start " Allow backspace over everything
set autoindent                " Auto indent
set smartindent               " Smart indent
set expandtab                 " Use spaces instead of tabs
set tabstop=4                 " Number of visual spaces per TAB
set softtabstop=4             " Number of spaces in tab when editing
set shiftwidth=4              " Number of spaces to use for autoindent
set wrap                      " Wrap lines
set linebreak                 " Break lines at word boundaries
set scrolloff=8               " Keep 8 lines above/below cursor
set sidescrolloff=8           " Keep 8 columns left/right of cursor
set mouse=a                   " Enable mouse support
set clipboard=unnamedplus     " Use system clipboard
" Fallback clipboard settings for different environments
if has('clipboard')
    if has('unnamedplus')
        set clipboard=unnamed,unnamedplus
    else
        set clipboard=unnamed
    endif
endif
set encoding=utf-8            " Set encoding
set fileencoding=utf-8        " Set file encoding
set termencoding=utf-8        " Set terminal encoding
set history=1000              " Command history
set undolevels=1000           " Undo history
set title                     " Set terminal title
set visualbell                " Use visual bell instead of beeping
set noerrorbells              " No error bells
set backup                    " Enable backup files
set backupdir=~/.vim/backup   " Backup directory
set directory=~/.vim/swap     " Swap file directory
set undofile                  " Persistent undo
set undodir=~/.vim/undo       " Undo directory

" Create necessary directories
if !isdirectory($HOME."/.vim/backup")
    call mkdir($HOME."/.vim/backup", "p")
endif
if !isdirectory($HOME."/.vim/swap")
    call mkdir($HOME."/.vim/swap", "p")
endif
if !isdirectory($HOME."/.vim/undo")
    call mkdir($HOME."/.vim/undo", "p")
endif

" Syntax and Colors
" ============================================================================
syntax enable                 " Enable syntax highlighting
filetype plugin indent on    " Enable filetype detection, plugins, and indent
set background=dark           " Dark background
colorscheme default           " Use default colorscheme

" Plugin Management with vim-plug
" ============================================================================
" Auto-install vim-plug if not present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugin declarations
call plug#begin('~/.vim/plugged')

" File explorer
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Git integration
Plug 'tpope/vim-fugitive'

" Syntax highlighting and language support
Plug 'sheerun/vim-polyglot'

" Auto pairs for brackets, quotes, etc.
Plug 'jiangmiao/auto-pairs'

" Comment toggling
Plug 'tpope/vim-commentary'

" Fuzzy finder
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Indentation guides
Plug 'Yggdroot/indentLine'

call plug#end()

" NERDTree Configuration
" ============================================================================
" Toggle NERDTree with F2
map <F2> :NERDTreeToggle<CR>

" Open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" NERDTree settings
let NERDTreeShowHidden=1          " Show hidden files
let NERDTreeIgnore=['\.pyc$', '\~$', '\.swp$', '\.git$', '\.DS_Store$']
let NERDTreeAutoDeleteBuffer=1    " Auto delete buffer when file is deleted
let NERDTreeMinimalUI=1           " Minimal UI
let NERDTreeDirArrows=1           " Use arrows for directories
let NERDTreeShowBookmarks=1       " Show bookmarks
let NERDTreeBookmarksFile='~/.vim/NERDTreeBookmarks'

" Airline Configuration
" ============================================================================
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_powerline_fonts = 0
let g:airline_theme = 'dark'

" FZF Configuration
" ============================================================================
" Ctrl+P to open file finder
nnoremap <C-p> :Files<CR>
" Ctrl+F to search in files
nnoremap <C-f> :Rg<CR>

" Key Mappings
" ============================================================================
" Set leader key
let mapleader = ","

" Quick save and quit
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>x :x<CR>

" Clear search highlighting
nnoremap <leader>/ :nohlsearch<CR>

" Buffer navigation
nnoremap <leader>n :bnext<CR>
nnoremap <leader>p :bprevious<CR>
nnoremap <leader>d :bdelete<CR>

" Window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Resize windows
nnoremap <leader>+ :vertical resize +5<CR>
nnoremap <leader>- :vertical resize -5<CR>
nnoremap <leader>= <C-w>=

" Move lines up/down
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Toggle line numbers
nnoremap <leader>l :set number!<CR>

" Toggle relative line numbers
nnoremap <leader>r :set relativenumber!<CR>

" Indent/unindent in visual mode
vnoremap < <gv
vnoremap > >gv

" Clipboard Configuration and Mappings
" ============================================================================
" With clipboard=unnamedplus, normal y/p operations work with system clipboard
" Additional explicit mappings for better control:
"
" Normal clipboard operations (work automatically with system clipboard):
"   y  - yank (copy) to both vim register and system clipboard
"   p  - paste from vim register (which syncs with system clipboard)
"   P  - paste before cursor
"   x  - cut character
"   dd - cut line
"
" Explicit system clipboard operations (using + register):
"   <leader>y  - copy to system clipboard
"   <leader>Y  - copy line to system clipboard
"   <leader>p  - paste from system clipboard
"   <leader>P  - paste before cursor from system clipboard
"   <leader>x  - cut to system clipboard

" Copy to system clipboard
vnoremap <leader>y "+y
nnoremap <leader>y "+y
nnoremap <leader>Y "+Y

" Paste from system clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p

" Cut to system clipboard
vnoremap <leader>x "+x
nnoremap <leader>x "+x

" File type specific settings
" ============================================================================
autocmd FileType python setlocal tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType javascript setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType css setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType json setlocal tabstop=2 shiftwidth=2 softtabstop=2

" Auto commands
" ============================================================================
" Remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Highlight TODO, FIXME, NOTE, etc.
autocmd Syntax * call matchadd('Todo', '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\|NOTE\)')

" Status line (if airline is not available)
" ============================================================================
if !exists('g:loaded_airline')
    set laststatus=2
    set statusline=%f         " Path to the file
    set statusline+=%=        " Switch to the right side
    set statusline+=%l        " Current line
    set statusline+=/         " Separator
    set statusline+=%L        " Total lines
endif

" Performance optimizations
" ============================================================================
set ttyfast                   " Fast terminal connection
set lazyredraw                " Don't redraw while executing macros

" Security
" ============================================================================
set modelines=0               " Disable modelines for security
set nomodeline                " Disable modeline

" Custom functions
" ============================================================================
" Toggle between number and relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
    set number
  else
    set relativenumber
  endif
endfunc

nnoremap <leader>t :call NumberToggle()<cr>

" Strip trailing whitespace
function! StripTrailingWhitespace()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfunc

nnoremap <leader>s :call StripTrailingWhitespace()<CR>
